def average_grade(dict):
    score = 0
    rew_num = 0
    for course in dict:
        score += sum(dict[course])
        rew_num += len(dict[course])
    return (score / rew_num)

def rate_hw_course(student, course):
    score = 0
    rew_num = 0
    for person in student:
        score += sum(person.grades[course])
        rew_num += len(person.grades[course])
    return (score / rew_num)

def rate_lect_course(lector, course):
    score = 0
    rew_num = 0
    for person in lector:
        score += sum(person.grades[course])
        rew_num += len(person.grades[course])
    return (score / rew_num)

class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lect(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'
    
    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за домашние задания: {average_grade(self.grades)} \nКурсы в процессе изучения: {", ".join(self.courses_in_progress)}\nЗавершенные курсы: {", ".join(self.finished_courses)}'
    
    def __lt__(self, other):
        if isinstance(other, Student):
            if (average_grade(self.grades)) < (average_grade(other.grades)):
                return(f'Средняя оценка ученика {self.name} {self.surname} меньше, чем у {other.name} {other.surname}')
            else:
                return(f'Средняя оценка лектора {self.name} {self.surname} больше, чем у {other.name} {other.surname}')
            
    def __gt__(self, other):
        if isinstance(other, Student):
            if (average_grade(self.grades)) > (average_grade(other.grades)):
                return(f'Средняя оценка лектора {self.name} {self.surname} больше, чем у {other.name} {other.surname}')
            else:
                return(f'Средняя оценка лектора {self.name} {self.surname} меньше, чем у {other.name} {other.surname}')           
    
    def __eq__(self, other):
        if isinstance(other, Student):
            if (average_grade(self.grades)) == (average_grade(other.grades)):
                return(f'Средняя оценка лектора {self.name} {self.surname} равна {other.name} {other.surname}')
            else:
                return(f'Средняя оценка лектора {self.name} {self.surname} не равна {other.name} {other.surname}')


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за лекции: {average_grade(self.grades)}'
    
    def __lt__(self, other):
        if isinstance(other, Lecturer):
            if (average_grade(self.grades)) < (average_grade(other.grades)):
                return(f'Средняя оценка лектора {self.name} {self.surname} меньше, чем у {other.name} {other.surname}')
            else:
                return(f'Средняя оценка лектора {self.name} {self.surname} больше, чем у {other.name} {other.surname}')
    
    def __gt__(self, other):
        if isinstance(other, Lecturer):
            if (average_grade(self.grades)) > (average_grade(other.grades)):
                return(f'Средняя оценка лектора {self.name} {self.surname} больше, чем у {other.name} {other.surname}')
            else:
                return(f'Средняя оценка лектора {self.name} {self.surname} меньше, чем у {other.name} {other.surname}')
        
    def ___eq__(self, other):
        if isinstance(other, Lecturer):
            if (average_grade(self.grades)) == (average_grade(other.grades)):
                return(f'Средняя оценка лектора {self.name} {self.surname} равна {other.name} {other.surname}')
            else:
                return(f'Средняя оценка лектора {self.name} {self.surname} не равна {other.name} {other.surname}')


class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
        
    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}'

student1 = Student('Peter', 'Parker', 'male')
student1.finished_courses = ['Web-design', 'Python']
student1.courses_in_progress = ['IT for management', 'Data science']

student2 = Student('Bruce', 'Banner', 'male')
student2.finished_courses = ['Django', 'Web-development']
student2.courses_in_progress = ['Data science', 'Python']

lecturer1 = Lecturer('Steve', 'Voznyak')
lecturer1.courses_attached = ['Python', 'Django', 'Data science']

lecturer2 = Lecturer('Mark', 'Zuckerberg')
lecturer2.courses_attached = ['IT for management', 'Data science']

reviewer1 = Reviewer('Bill', 'Gates')
reviewer1.courses_attached = ['Python', 'Data science']

reviewer2 = Reviewer('Marcus', 'Notch')
reviewer2.courses_attached = ['Django', 'Data science']

reviewer1.rate_hw(student1,'Data science',5)
reviewer1.rate_hw(student1,'Data science',7)
reviewer1.rate_hw(student1,'Data science',6)

reviewer2.rate_hw(student1,'Data science',3)
reviewer2.rate_hw(student1,'Data science',2)
reviewer2.rate_hw(student1,'Data science',5)

reviewer1.rate_hw(student2,'Data science',10)
reviewer1.rate_hw(student2,'Data science',4)

reviewer2.rate_hw(student2,'Data science',4)
reviewer2.rate_hw(student2,'Data science',2)

student1.rate_lect(lecturer1, 'Data science', 10)
student1.rate_lect(lecturer1, 'Data science', 9)
student1.rate_lect(lecturer1, 'Data science', 10)

student2.rate_lect(lecturer1, 'Data science', 3)
student2.rate_lect(lecturer1, 'Data science', 2)

student1.rate_lect(lecturer2,'Data science',9)
student1.rate_lect(lecturer2, 'Data science', 10)
student1.rate_lect(lecturer2, 'Data science', 9)

student2.rate_lect(lecturer2,'Data science',3)
student2.rate_lect(lecturer2,'Data science',9)

print('Лекторы:')
print(lecturer1, end='\n'*2)
print(lecturer2, end='\n'*2)

print('Студенты:')
print(student1, end='\n'*2)
print(student2, end='\n'*2)

print('Эксперты:')
print(reviewer1, end='\n'*2)
print(reviewer2, end='\n'*2)

print(f'Средняя оценка за курс "Data Science" лекторов:"{lecturer1.name} {lecturer1.surname}" и "{lecturer2.name} {lecturer2.surname}"- {rate_lect_course([lecturer1, lecturer2], 'Data science')}\n')

print(f'Средняя оценка домашних заданий за курс "Data Science": {rate_hw_course([student1, student2], 'Data science')}\n')

print(f'{lecturer1 > lecturer2}\n')

print(student1 < student2)