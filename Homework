def average_grade(dict):
    score = 0
    rew_num = 0
    for course in dict:
        score += sum(dict[course])
        rew_num += len(dict[course])
    return (score / rew_num)

def rate_hw_course(student, course):
    score = 0
    rew_num = 0
    for person in student:
        score += sum(person.grades[course])
        rew_num += len(person.grades[course])
    return (score / rew_num)

def rate_lect_course(lector, course):
    score = 0
    rew_num = 0
    for person in lector:
        score += sum(person.grades[course])
        rew_num += len(person.grades[course])
    return (score / rew_num)

class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lect(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.courses_attached:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'
    
    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за домашние задания: {average_grade(self.grades)} \nКурсы в процессе изучения: {", ".join(self.courses_in_progress)}\nЗавершенные курсы: {", ".join(self.finished_courses)}'
    
    def __lt__(self, other):
        if isinstance(other, Student):
            return (average_grade(self.grades)) < (average_grade(other.grades))
            
    def __gt__(self, other):
        if isinstance(other, Student):
            return (average_grade(self.grades)) > (average_grade(other.grades))
            
    def __eq__(self, other):
        if isinstance(other, Student):
            return (average_grade(self.grades)) == (average_grade(other.grades))


class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}\nСредняя оценка за лекции: {average_grade(self.grades)}'
    
    def __lt__(self, other):
        if isinstance(other, Lecturer):
            return (average_grade(self.grades)) < (average_grade(other.grades))
    
    def __gt__(self, other):
        if isinstance(other, Lecturer):
            return (average_grade(self.grades)) > (average_grade(other.grades))
        
    def ___eq__(self, other):
        if isinstance(other, Lecturer):
            return (average_grade(self.grades)) == (average_grade(other.grades))


class Reviewer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
        
    def __str__(self):
        return f'Имя: {self.name}\nФамилия: {self.surname}'
